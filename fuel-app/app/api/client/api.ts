/* tslint:disable */
/* eslint-disable */
/**
 * Fuel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BalanceResponse
 */
export interface BalanceResponse {
    /**
     * 
     * @type {number}
     * @memberof BalanceResponse
     */
    'ano': number;
    /**
     * 
     * @type {number}
     * @memberof BalanceResponse
     */
    'total_compra': number;
    /**
     * 
     * @type {number}
     * @memberof BalanceResponse
     */
    'total_venda': number;
    /**
     * 
     * @type {number}
     * @memberof BalanceResponse
     */
    'diferenca': number;
}
/**
 * 
 * @export
 * @interface FuelResponse
 */
export interface FuelResponse {
    /**
     * 
     * @type {number}
     * @memberof FuelResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FuelResponse
     */
    'nome': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface OrderCreate
 */
export interface OrderCreate {
    /**
     * ID do combustível
     * @type {number}
     * @memberof OrderCreate
     */
    'fuel_id': number;
    /**
     * Tipo da operação: compra ou venda
     * @type {string}
     * @memberof OrderCreate
     */
    'tipo': OrderCreateTipoEnum;
    /**
     * Data da operação
     * @type {string}
     * @memberof OrderCreate
     */
    'data': string;
    /**
     * Quantidade de litros
     * @type {number}
     * @memberof OrderCreate
     */
    'litros': number;
    /**
     * Valor do selic aplicado
     * @type {number}
     * @memberof OrderCreate
     */
    'selic': number;
}

export const OrderCreateTipoEnum = {
    Compra: 'compra',
    Venda: 'venda'
} as const;

export type OrderCreateTipoEnum = typeof OrderCreateTipoEnum[keyof typeof OrderCreateTipoEnum];

/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'fuel_id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'data': string;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'ref_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'litros': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'valor': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'selic': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * BalanceApi - axios parameter creator
 * @export
 */
export const BalanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Balance
         * @param {number} ano Ano para consulta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceApiV1BalanceGet: async (ano: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ano' is not null or undefined
            assertParamExists('getBalanceApiV1BalanceGet', 'ano', ano)
            const localVarPath = `/api/v1/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ano !== undefined) {
                localVarQueryParameter['ano'] = ano;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BalanceApi - functional programming interface
 * @export
 */
export const BalanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BalanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Balance
         * @param {number} ano Ano para consulta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceApiV1BalanceGet(ano: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceApiV1BalanceGet(ano, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BalanceApi.getBalanceApiV1BalanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BalanceApi - factory interface
 * @export
 */
export const BalanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BalanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Balance
         * @param {number} ano Ano para consulta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceApiV1BalanceGet(ano: number, options?: RawAxiosRequestConfig): AxiosPromise<BalanceResponse> {
            return localVarFp.getBalanceApiV1BalanceGet(ano, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BalanceApi - object-oriented interface
 * @export
 * @class BalanceApi
 * @extends {BaseAPI}
 */
export class BalanceApi extends BaseAPI {
    /**
     * 
     * @summary Get Balance
     * @param {number} ano Ano para consulta
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApi
     */
    public getBalanceApiV1BalanceGet(ano: number, options?: RawAxiosRequestConfig) {
        return BalanceApiFp(this.configuration).getBalanceApiV1BalanceGet(ano, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FuelApi - axios parameter creator
 * @export
 */
export const FuelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Fuels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuelsApiV1FuelGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/fuel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuelApi - functional programming interface
 * @export
 */
export const FuelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FuelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Fuels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFuelsApiV1FuelGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FuelResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFuelsApiV1FuelGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FuelApi.getFuelsApiV1FuelGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FuelApi - factory interface
 * @export
 */
export const FuelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FuelApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Fuels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuelsApiV1FuelGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FuelResponse>> {
            return localVarFp.getFuelsApiV1FuelGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuelApi - object-oriented interface
 * @export
 * @class FuelApi
 * @extends {BaseAPI}
 */
export class FuelApi extends BaseAPI {
    /**
     * 
     * @summary Get Fuels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelApi
     */
    public getFuelsApiV1FuelGet(options?: RawAxiosRequestConfig) {
        return FuelApiFp(this.configuration).getFuelsApiV1FuelGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create New Order
         * @param {OrderCreate} orderCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrderApiV1OrderPost: async (orderCreate: OrderCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderCreate' is not null or undefined
            assertParamExists('createNewOrderApiV1OrderPost', 'orderCreate', orderCreate)
            const localVarPath = `/api/v1/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create New Order
         * @param {OrderCreate} orderCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewOrderApiV1OrderPost(orderCreate: OrderCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewOrderApiV1OrderPost(orderCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.createNewOrderApiV1OrderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create New Order
         * @param {OrderCreate} orderCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrderApiV1OrderPost(orderCreate: OrderCreate, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse> {
            return localVarFp.createNewOrderApiV1OrderPost(orderCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Create New Order
     * @param {OrderCreate} orderCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createNewOrderApiV1OrderPost(orderCreate: OrderCreate, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).createNewOrderApiV1OrderPost(orderCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



