/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BalancoConsultaResponse
 */
export interface BalancoConsultaResponse {
    /**
     * 
     * @type {number}
     * @memberof BalancoConsultaResponse
     */
    'ano': number;
    /**
     * 
     * @type {number}
     * @memberof BalancoConsultaResponse
     */
    'total_compra': number;
    /**
     * 
     * @type {number}
     * @memberof BalancoConsultaResponse
     */
    'total_venda': number;
    /**
     * 
     * @type {number}
     * @memberof BalancoConsultaResponse
     */
    'diferenca': number;
}
/**
 * 
 * @export
 * @interface CombustivelResponse
 */
export interface CombustivelResponse {
    /**
     * 
     * @type {number}
     * @memberof CombustivelResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CombustivelResponse
     */
    'nome': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface OperacaoCreate
 */
export interface OperacaoCreate {
    /**
     * ID do combustível
     * @type {number}
     * @memberof OperacaoCreate
     */
    'combustivel_id': number;
    /**
     * Tipo da operação: compra ou venda
     * @type {string}
     * @memberof OperacaoCreate
     */
    'tipo': OperacaoCreateTipoEnum;
    /**
     * Data da operação
     * @type {string}
     * @memberof OperacaoCreate
     */
    'data': string;
    /**
     * Quantidade de litros
     * @type {number}
     * @memberof OperacaoCreate
     */
    'litros': number;
    /**
     * Valor do selic aplicado
     * @type {number}
     * @memberof OperacaoCreate
     */
    'selic': number;
}

export const OperacaoCreateTipoEnum = {
    Compra: 'compra',
    Venda: 'venda'
} as const;

export type OperacaoCreateTipoEnum = typeof OperacaoCreateTipoEnum[keyof typeof OperacaoCreateTipoEnum];

/**
 * 
 * @export
 * @interface OperacaoResponse
 */
export interface OperacaoResponse {
    /**
     * 
     * @type {number}
     * @memberof OperacaoResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof OperacaoResponse
     */
    'combustivel_id': number;
    /**
     * 
     * @type {string}
     * @memberof OperacaoResponse
     */
    'tipo': string;
    /**
     * 
     * @type {string}
     * @memberof OperacaoResponse
     */
    'data': string;
    /**
     * 
     * @type {number}
     * @memberof OperacaoResponse
     */
    'ref_id': number;
    /**
     * 
     * @type {number}
     * @memberof OperacaoResponse
     */
    'litros': number;
    /**
     * 
     * @type {number}
     * @memberof OperacaoResponse
     */
    'valor': number;
    /**
     * 
     * @type {number}
     * @memberof OperacaoResponse
     */
    'selic': number;
}
/**
 * 
 * @export
 * @interface PrecoCompra
 */
export interface PrecoCompra {
    /**
     * 
     * @type {number}
     * @memberof PrecoCompra
     */
    'combustivel_id': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoCompra
     */
    'mes': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoCompra
     */
    'preco': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoCompra
     */
    'tributo': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoCompra
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PrecoVenda
 */
export interface PrecoVenda {
    /**
     * 
     * @type {number}
     * @memberof PrecoVenda
     */
    'combustivel_id': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoVenda
     */
    'mes': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoVenda
     */
    'preco': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoVenda
     */
    'tributo': number;
    /**
     * 
     * @type {number}
     * @memberof PrecoVenda
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * BalancoApi - axios parameter creator
 * @export
 */
export const BalancoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obter Balanco
         * @param {number} ano Ano para consulta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obterBalancoApiV1BalancoGet: async (ano: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ano' is not null or undefined
            assertParamExists('obterBalancoApiV1BalancoGet', 'ano', ano)
            const localVarPath = `/api/v1/balanco`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ano !== undefined) {
                localVarQueryParameter['ano'] = ano;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BalancoApi - functional programming interface
 * @export
 */
export const BalancoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BalancoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Obter Balanco
         * @param {number} ano Ano para consulta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obterBalancoApiV1BalancoGet(ano: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalancoConsultaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.obterBalancoApiV1BalancoGet(ano, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BalancoApi.obterBalancoApiV1BalancoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BalancoApi - factory interface
 * @export
 */
export const BalancoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BalancoApiFp(configuration)
    return {
        /**
         * 
         * @summary Obter Balanco
         * @param {number} ano Ano para consulta
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obterBalancoApiV1BalancoGet(ano: number, options?: RawAxiosRequestConfig): AxiosPromise<BalancoConsultaResponse> {
            return localVarFp.obterBalancoApiV1BalancoGet(ano, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BalancoApi - object-oriented interface
 * @export
 * @class BalancoApi
 * @extends {BaseAPI}
 */
export class BalancoApi extends BaseAPI {
    /**
     * 
     * @summary Obter Balanco
     * @param {number} ano Ano para consulta
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancoApi
     */
    public obterBalancoApiV1BalancoGet(ano: number, options?: RawAxiosRequestConfig) {
        return BalancoApiFp(this.configuration).obterBalancoApiV1BalancoGet(ano, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CombustiveisApi - axios parameter creator
 * @export
 */
export const CombustiveisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Combustiveis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCombustiveisApiV1CombustiveisGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/combustiveis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CombustiveisApi - functional programming interface
 * @export
 */
export const CombustiveisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CombustiveisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Combustiveis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCombustiveisApiV1CombustiveisGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CombustivelResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCombustiveisApiV1CombustiveisGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CombustiveisApi.getCombustiveisApiV1CombustiveisGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CombustiveisApi - factory interface
 * @export
 */
export const CombustiveisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CombustiveisApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Combustiveis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCombustiveisApiV1CombustiveisGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CombustivelResponse>> {
            return localVarFp.getCombustiveisApiV1CombustiveisGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CombustiveisApi - object-oriented interface
 * @export
 * @class CombustiveisApi
 * @extends {BaseAPI}
 */
export class CombustiveisApi extends BaseAPI {
    /**
     * 
     * @summary Get Combustiveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CombustiveisApi
     */
    public getCombustiveisApiV1CombustiveisGet(options?: RawAxiosRequestConfig) {
        return CombustiveisApiFp(this.configuration).getCombustiveisApiV1CombustiveisGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OperacoesApi - axios parameter creator
 * @export
 */
export const OperacoesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Criar Operacao Endpoint
         * @param {OperacaoCreate} operacaoCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criarOperacaoEndpointApiV1OperacoesPost: async (operacaoCreate: OperacaoCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operacaoCreate' is not null or undefined
            assertParamExists('criarOperacaoEndpointApiV1OperacoesPost', 'operacaoCreate', operacaoCreate)
            const localVarPath = `/api/v1/operacoes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(operacaoCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperacoesApi - functional programming interface
 * @export
 */
export const OperacoesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperacoesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Criar Operacao Endpoint
         * @param {OperacaoCreate} operacaoCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async criarOperacaoEndpointApiV1OperacoesPost(operacaoCreate: OperacaoCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperacaoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.criarOperacaoEndpointApiV1OperacoesPost(operacaoCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperacoesApi.criarOperacaoEndpointApiV1OperacoesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OperacoesApi - factory interface
 * @export
 */
export const OperacoesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperacoesApiFp(configuration)
    return {
        /**
         * 
         * @summary Criar Operacao Endpoint
         * @param {OperacaoCreate} operacaoCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        criarOperacaoEndpointApiV1OperacoesPost(operacaoCreate: OperacaoCreate, options?: RawAxiosRequestConfig): AxiosPromise<OperacaoResponse> {
            return localVarFp.criarOperacaoEndpointApiV1OperacoesPost(operacaoCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperacoesApi - object-oriented interface
 * @export
 * @class OperacoesApi
 * @extends {BaseAPI}
 */
export class OperacoesApi extends BaseAPI {
    /**
     * 
     * @summary Criar Operacao Endpoint
     * @param {OperacaoCreate} operacaoCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperacoesApi
     */
    public criarOperacaoEndpointApiV1OperacoesPost(operacaoCreate: OperacaoCreate, options?: RawAxiosRequestConfig) {
        return OperacoesApiFp(this.configuration).criarOperacaoEndpointApiV1OperacoesPost(operacaoCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RefCompraApi - axios parameter creator
 * @export
 */
export const RefCompraApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listar Ref Compra
         * @param {number | null} [combustivelId] 
         * @param {number | null} [mes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarRefCompraApiV1RefCompraGet: async (combustivelId?: number | null, mes?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ref_compra`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (combustivelId !== undefined) {
                localVarQueryParameter['combustivel_id'] = combustivelId;
            }

            if (mes !== undefined) {
                localVarQueryParameter['mes'] = mes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefCompraApi - functional programming interface
 * @export
 */
export const RefCompraApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefCompraApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listar Ref Compra
         * @param {number | null} [combustivelId] 
         * @param {number | null} [mes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarRefCompraApiV1RefCompraGet(combustivelId?: number | null, mes?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrecoCompra>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarRefCompraApiV1RefCompraGet(combustivelId, mes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefCompraApi.listarRefCompraApiV1RefCompraGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RefCompraApi - factory interface
 * @export
 */
export const RefCompraApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefCompraApiFp(configuration)
    return {
        /**
         * 
         * @summary Listar Ref Compra
         * @param {number | null} [combustivelId] 
         * @param {number | null} [mes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarRefCompraApiV1RefCompraGet(combustivelId?: number | null, mes?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<PrecoCompra>> {
            return localVarFp.listarRefCompraApiV1RefCompraGet(combustivelId, mes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefCompraApi - object-oriented interface
 * @export
 * @class RefCompraApi
 * @extends {BaseAPI}
 */
export class RefCompraApi extends BaseAPI {
    /**
     * 
     * @summary Listar Ref Compra
     * @param {number | null} [combustivelId] 
     * @param {number | null} [mes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefCompraApi
     */
    public listarRefCompraApiV1RefCompraGet(combustivelId?: number | null, mes?: number | null, options?: RawAxiosRequestConfig) {
        return RefCompraApiFp(this.configuration).listarRefCompraApiV1RefCompraGet(combustivelId, mes, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RefVendaApi - axios parameter creator
 * @export
 */
export const RefVendaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listar Ref Venda
         * @param {number | null} [combustivelId] 
         * @param {number | null} [mes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarRefVendaApiV1RefVendaGet: async (combustivelId?: number | null, mes?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ref_venda`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (combustivelId !== undefined) {
                localVarQueryParameter['combustivel_id'] = combustivelId;
            }

            if (mes !== undefined) {
                localVarQueryParameter['mes'] = mes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefVendaApi - functional programming interface
 * @export
 */
export const RefVendaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefVendaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listar Ref Venda
         * @param {number | null} [combustivelId] 
         * @param {number | null} [mes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarRefVendaApiV1RefVendaGet(combustivelId?: number | null, mes?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrecoVenda>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarRefVendaApiV1RefVendaGet(combustivelId, mes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefVendaApi.listarRefVendaApiV1RefVendaGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RefVendaApi - factory interface
 * @export
 */
export const RefVendaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefVendaApiFp(configuration)
    return {
        /**
         * 
         * @summary Listar Ref Venda
         * @param {number | null} [combustivelId] 
         * @param {number | null} [mes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarRefVendaApiV1RefVendaGet(combustivelId?: number | null, mes?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<PrecoVenda>> {
            return localVarFp.listarRefVendaApiV1RefVendaGet(combustivelId, mes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefVendaApi - object-oriented interface
 * @export
 * @class RefVendaApi
 * @extends {BaseAPI}
 */
export class RefVendaApi extends BaseAPI {
    /**
     * 
     * @summary Listar Ref Venda
     * @param {number | null} [combustivelId] 
     * @param {number | null} [mes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefVendaApi
     */
    public listarRefVendaApiV1RefVendaGet(combustivelId?: number | null, mes?: number | null, options?: RawAxiosRequestConfig) {
        return RefVendaApiFp(this.configuration).listarRefVendaApiV1RefVendaGet(combustivelId, mes, options).then((request) => request(this.axios, this.basePath));
    }
}



